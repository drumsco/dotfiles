" key setting {{{
" ==============================================================================
" cuiのvimでaltを使う設定
" https://github.com/cpfaff/vim-my-setup/blob/master/vimrc
for i in range(32,126)
    let c = nr2char(i)
    if c=='|' || c=='"'
        exec "set <M-\\".c.">=\<Esc>\\".c
    elseif c==' ' || c==':' || c=='>' || c==#'P' || c=='['
        "set <M-Space>=\<Esc>\<Space> 他のsetに影響する?
        "set <M-\>>=\<Esc>> <M->>に対してsetできない
        "set <M-:>はインサートモードから抜けて、コマンド打つときに引っかかる
        "set <M-P>=\<Esc>P  \ePは制御シーケンスで使用するためsetしない
        "set <M-[>=\<Esc>[  これがあるとvim起動した後、2cが打たれる
    else
        exec "set <M-".c.">=\<Esc>".c
    endif
endfor

" <C-Tab><S-C-Tab>など、ターミナル上で定義されていないキーを設定するためのトリック
" http://vim.wikia.com/wiki/Mapping_fast_keycodes_in_terminal_Vim
" MapFastKeycode: helper for fast keycode mappings
" makes use of unused vim keycodes <[S-]F15> to <[S-]F37>
function! <SID>MapFastKeycode(key, keycode)
    if s:fast_i == 46
        echohl WarningMsg
        echomsg "Unable to map ".a:key.": out of spare keycodes"
        echohl None
        return
    endif
    let vkeycode = '<'.(s:fast_i/23==0 ? '' : 'S-').'F'.(15+s:fast_i%23).'>'
    exec 'set '.vkeycode.'='.a:keycode
    exec 'map '.vkeycode.' '.a:key
    let s:fast_i += 1
endfunction
let s:fast_i = 0

call <SID>MapFastKeycode('<C-Tab>', "[27;5;9~")
call <SID>MapFastKeycode('<S-C-Tab>', "[27;6;9~")

nnoremap <A-a> ggVG
"}}}

" paste {{{
" ==============================================================================
"Tera TermなどのBracketed Paste Modeをサポートした端末では
"以下の設定で、貼り付けるとき自動的にpasteモードに切り替えてくれる。
" http://sanrinsha.lolipop.jp/blog/2013/01/10618.html
if &term =~ "xterm" && v:version > 603
    "for screen
    if &term == "xterm-256color"
        let &t_SI = "\ePtmux;\e\e[?2004h\e\\"
        let &t_EI = "\ePtmux;\e\e[?2004l\e\\"
    " elseif $TERM =~ 'xterm-256color'
    "     let &t_SI = "\eP\e[?2004h\e\\"
    "     let &t_EI = "\eP\e[?2004l\e\\"
    else
        let &t_SI = "\e[?2004h"
        let &t_EI = "\e[?2004l"
    endif
    let &pastetoggle = "\e[201~"

    exec "set <F13>=\e[200~"
    inoremap <F13> <C-o>:set paste<CR>
endif
"}}}

" clipboard {{{
" ==============================================================================
" http://sanrinsha.lolipop.jp/blog/2013/01/10618.html
function! s:Paste64Copy() range
    let l:tmp = @"
    silent normal gvy
    let l:selected = @"
    let @" = l:tmp
    let l:i = 0
    let l:len = strlen(l:selected)
    let l:escaped = ''
    while l:i < l:len
        let l:c = strpart(l:selected, l:i, 1)
        if char2nr(l:c) < 128
            let l:escaped .= printf("\\u%04x", char2nr(l:c))
        else
            let l:escaped .= l:c
        endif
        let l:i += 1
    endwhile
    call system('echo -en "' . l:escaped . '" | pbcopy > /dev/tty')
    redraw!
endfunction

command! -range Paste64Copy :call s:Paste64Copy()

vnoremap <A-c> :Paste64Copy<CR>
" }}}

" mouse {{{
" ==============================================================================
" For screen, tmux
if &term == "xterm-256color"
    augroup MyAutoCmd
        autocmd VimLeave * :set mouse=
    augroup END

    " screenでマウスを使用するとフリーズするのでその対策
    " Tere Termだと自動で認識されているかも
    " http://slashdot.jp/journal/514186/vim-%E3%81%A7%E3%81%AE-xterm-%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%AE%E8%87%AA%E5%8B%95%E8%AA%8D%E8%AD%98
    set ttymouse=xterm2
endif
"}}}
